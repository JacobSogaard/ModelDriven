/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.validation;

import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.dslproject.Agent;
import org.xtext.example.dslproject.DslprojectPackage;
import org.xtext.example.dslproject.Entity;
import org.xtext.example.dslproject.FollowRelation;
import org.xtext.example.dslproject.Intent;
import org.xtext.example.dslproject.Model;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class DslprojectValidator extends AbstractDslprojectValidator {
	
//	public static final INVALID_NAME = 'invalidName'
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					DslprojectPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	/*
	@Check
	def checkEntityNoCyclicExtends(Entity entity) {
		val seen = new HashSet<String>
		seen.add(entity.name)
		if(entity.zuper.selfExtends(seen)) {
			error('Cyclic extends relation',Literals.ENTITY__ZUPER,"cyclicInheritance")
		}
	}
	
	def boolean selfExtends(Entity next, Set<String> seen) {
		if(next===null) false
		else if(seen.contains(next.name)) true
		else { seen.add(next.name) next.zuper.selfExtends(seen) }
	}
	*/
	
	@Check
	public void checkCyclicRelations(Intent intent) {
		HashSet<String> seen = new HashSet<String>();
		seen.add(intent.getName());
		if(selfExtends(intent.getZuper(), seen)) {
			warning("Cyclic extends relation", DslprojectPackage.Literals.INTENT__ZUPER, "cyclicInheritance");
		}
	}
	
	private boolean selfExtends(Intent next, HashSet<String> seen) {
		if (next==null) {
			return false;
		} else if(seen.contains(next.getName()) ) {
			return true;
		} else {
			seen.add(next.getName());
			return selfExtends(next.getZuper(), seen);
		}
	}
	

	//Works
	@Check
	public void checkDuplicateIntents(Intent intent) {
		String currentIntent = intent.getName();
		Model model = (Model) intent.eContainer();
		for (Agent agent : model.getAgent()) {
			if (agent instanceof Intent) {
				Intent i = (Intent) agent;
				if (i.getName().equals(currentIntent) && i!=intent) {
					error("Intent already exists", DslprojectPackage.Literals.INTENT__NAME, "duplicateIntent");
				} 
			}
		}
	}
	
	@Check
	public void checkDuplicateEntity(Entity entity) {
		String currentIntent = entity.getName();
		Model model = (Model) entity.eContainer();
		for (Agent agent : model.getAgent()) {
			if (agent instanceof Entity) {
				Entity i = (Entity) agent;
				if (i.getName().equals(currentIntent) && i!=entity) {
					error("Entity already exists", DslprojectPackage.Literals.ENTITY__NAME, "duplicateEntity");
				} 
			}
		}
	}
}
