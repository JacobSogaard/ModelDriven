/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.dslproject.Decl;
import org.xtext.example.dslproject.Declaration;
import org.xtext.example.dslproject.DslprojectPackage;
import org.xtext.example.dslproject.Entity;
import org.xtext.example.dslproject.EntityExample;
import org.xtext.example.dslproject.FollowRelation;
import org.xtext.example.dslproject.Intent;
import org.xtext.example.dslproject.Model;
import org.xtext.example.dslproject.Question;
import org.xtext.example.dslproject.QuestionEntity;
import org.xtext.example.dslproject.QuestionRef;
import org.xtext.example.dslproject.Reference;
import org.xtext.example.dslproject.Sin;
import org.xtext.example.dslproject.SuperQuestion;
import org.xtext.example.dslproject.Sysvariable;
import org.xtext.example.dslproject.Training;
import org.xtext.example.dslproject.TrainingRef;
import org.xtext.example.services.DslprojectGrammarAccess;

@SuppressWarnings("all")
public class DslprojectSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslprojectGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslprojectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslprojectPackage.DECL:
				sequence_TrainingInput(context, (Decl) semanticObject); 
				return; 
			case DslprojectPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case DslprojectPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DslprojectPackage.ENTITY_EXAMPLE:
				sequence_EntityExample(context, (EntityExample) semanticObject); 
				return; 
			case DslprojectPackage.FOLLOW_RELATION:
				sequence_FollowRelation(context, (FollowRelation) semanticObject); 
				return; 
			case DslprojectPackage.INTENT:
				sequence_Intent(context, (Intent) semanticObject); 
				return; 
			case DslprojectPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslprojectPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case DslprojectPackage.QUESTION_ENTITY:
				sequence_QuestionEntity(context, (QuestionEntity) semanticObject); 
				return; 
			case DslprojectPackage.QUESTION_REF:
				sequence_QuestionRef(context, (QuestionRef) semanticObject); 
				return; 
			case DslprojectPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case DslprojectPackage.SIN:
				sequence_TrainingInput(context, (Sin) semanticObject); 
				return; 
			case DslprojectPackage.SUPER_QUESTION:
				sequence_SuperQuestion(context, (SuperQuestion) semanticObject); 
				return; 
			case DslprojectPackage.SYSVARIABLE:
				sequence_Sysvariable(context, (Sysvariable) semanticObject); 
				return; 
			case DslprojectPackage.TRAINING:
				sequence_Training(context, (Training) semanticObject); 
				return; 
			case DslprojectPackage.TRAINING_REF:
				sequence_TrainingRef(context, (TrainingRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (trainingstring=STRING reference=Reference)
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.DECLARATION__TRAININGSTRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.DECLARATION__TRAININGSTRING));
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.DECLARATION__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.DECLARATION__REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclarationAccess().getTrainingstringSTRINGTerminalRuleCall_1_0(), semanticObject.getTrainingstring());
		feeder.accept(grammarAccess.getDeclarationAccess().getReferenceReferenceParserRuleCall_3_0(), semanticObject.getReference());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityExample returns EntityExample
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EntityExample(ISerializationContext context, EntityExample semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.ENTITY_EXAMPLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.ENTITY_EXAMPLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityExampleAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID example+=EntityExample+)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns FollowRelation
	 *     FollowRelation returns FollowRelation
	 *
	 * Constraint:
	 *     (parent=[Intent|ID] child=[Intent|ID])
	 */
	protected void sequence_FollowRelation(ISerializationContext context, FollowRelation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.FOLLOW_RELATION__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.FOLLOW_RELATION__PARENT));
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.FOLLOW_RELATION__CHILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.FOLLOW_RELATION__CHILD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFollowRelationAccess().getParentIntentIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DslprojectPackage.Literals.FOLLOW_RELATION__PARENT, false));
		feeder.accept(grammarAccess.getFollowRelationAccess().getChildIntentIDTerminalRuleCall_3_0_1(), semanticObject.eGet(DslprojectPackage.Literals.FOLLOW_RELATION__CHILD, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Agent returns Intent
	 *     Intent returns Intent
	 *
	 * Constraint:
	 *     (name=ID zuper=[Intent|ID]? question+=QuestionRef+ training=Training)
	 */
	protected void sequence_Intent(ISerializationContext context, Intent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     agent+=Agent+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QuestionEntity returns QuestionEntity
	 *
	 * Constraint:
	 *     withEntity=Reference
	 */
	protected void sequence_QuestionEntity(ISerializationContext context, QuestionEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.QUESTION_ENTITY__WITH_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.QUESTION_ENTITY__WITH_ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuestionEntityAccess().getWithEntityReferenceParserRuleCall_0(), semanticObject.getWithEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QuestionRef returns QuestionRef
	 *
	 * Constraint:
	 *     (question=Question | superQuestion=SuperQuestion)
	 */
	protected void sequence_QuestionRef(ISerializationContext context, QuestionRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (required='require'? name=ID? questionEntity=QuestionEntity prompt=STRING)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (entity=[Entity|ID] | sysvar=Sysvariable)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SuperQuestion returns SuperQuestion
	 *
	 * Constraint:
	 *     superQuestion=[Question|ID]
	 */
	protected void sequence_SuperQuestion(ISerializationContext context, SuperQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.SUPER_QUESTION__SUPER_QUESTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.SUPER_QUESTION__SUPER_QUESTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSuperQuestionAccess().getSuperQuestionQuestionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DslprojectPackage.Literals.SUPER_QUESTION__SUPER_QUESTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sysvariable returns Sysvariable
	 *
	 * Constraint:
	 *     (
	 *         value='number' | 
	 *         value='date-time' | 
	 *         value='date' | 
	 *         value='duration' | 
	 *         value='address' | 
	 *         value='email' | 
	 *         value='phone-number' | 
	 *         value='date-period' | 
	 *         value='time-period' | 
	 *         value='url' | 
	 *         value='any' | 
	 *         value='color' | 
	 *         value='language'
	 *     )
	 */
	protected void sequence_Sysvariable(ISerializationContext context, Sysvariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrainingInput returns Decl
	 *
	 * Constraint:
	 *     declarations=Declaration
	 */
	protected void sequence_TrainingInput(ISerializationContext context, Decl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.DECL__DECLARATIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.DECL__DECLARATIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrainingInputAccess().getDeclarationsDeclarationParserRuleCall_1_1_0(), semanticObject.getDeclarations());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrainingInput returns Sin
	 *
	 * Constraint:
	 *     s=STRING
	 */
	protected void sequence_TrainingInput(ISerializationContext context, Sin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslprojectPackage.Literals.SIN__S) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslprojectPackage.Literals.SIN__S));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrainingInputAccess().getSSTRINGTerminalRuleCall_0_1_0(), semanticObject.getS());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrainingRef returns TrainingRef
	 *
	 * Constraint:
	 *     input+=TrainingInput+
	 */
	protected void sequence_TrainingRef(ISerializationContext context, TrainingRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Training returns Training
	 *
	 * Constraint:
	 *     trainingref+=TrainingRef+
	 */
	protected void sequence_Training(ISerializationContext context, Training semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
