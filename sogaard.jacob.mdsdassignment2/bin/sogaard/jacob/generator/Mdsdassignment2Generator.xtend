/*
 * generated by Xtext 2.20.0
 */
package sogaard.jacob.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import sogaard.jacob.mdsdassignment2.MathExp
import javax.swing.JOptionPane
import sogaard.jacob.mdsdassignment2.Exp
import sogaard.jacob.mdsdassignment2.Mult
import sogaard.jacob.mdsdassignment2.Div
import sogaard.jacob.mdsdassignment2.Add
import sogaard.jacob.mdsdassignment2.Sub
import sogaard.jacob.mdsdassignment2.Num
import sogaard.jacob.mdsdassignment2.ExpOp
//import sogaard.jacob.mdsdassignment2.Primary
import sogaard.jacob.mdsdassignment2.Parenthesis

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Mdsdassignment2Generator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) { 
		math.exp.computeExp
	}
	
	def int computeExp(Exp exp) {
		
		val left = exp.left.computePrim
		switch exp.operator {
			Add: left+exp.right.computeExp
			Sub: left-exp.right.computeExp
			Mult: left*exp.right.computeExp
			Div: left/exp.right.computeExp
			default: left
		}
	}
	
	def int computePrim(ExpOp factor) { 
		0
		/*
		if (factor.number !== null) {
			factor.number.value
		} else if (factor.par !== null) {
			factor.par.exp.right.computeExp //This isn't working
		} else { 
			0
		}
		
		*/
		
		 
	
		
	}

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def CharSequence display(MathExp math) '''«math.exp.displayExp»'''
	def CharSequence displayExp(Exp exp) '''«exp.left.displayOp»«exp.operator?.displayOp»«exp.right?.displayExp»'''
	
	def dispatch CharSequence displayOp(Add op) '''«op.left.displayOp»+«op.right.displayOp»'''
	def dispatch CharSequence displayOp(Sub op) '''«op.left.displayOp»-«op.right.displayOp»'''
	def dispatch CharSequence displayOp(Mult op) '''«op.left.displayOp»*«op.right.displayOp»'''
	def dispatch CharSequence displayOp(Div op) '''«op.left.displayOp»/«op.right.displayOp»'''
	def dispatch CharSequence displayOp(Num op) '''«op.value»'''
	def dispatch CharSequence displayOp(Parenthesis p) '''(«p.exp.displayExp»)'''

}
