/**
 * generated by Xtext 2.20.0
 */
package org.xtext.example.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend.lib.annotations.Data;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.Pure;
import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;
import org.xtext.example.dslproject.Decl;
import org.xtext.example.dslproject.Entity;
import org.xtext.example.dslproject.EntityExample;
import org.xtext.example.dslproject.FollowRelation;
import org.xtext.example.dslproject.Intent;
import org.xtext.example.dslproject.Question;
import org.xtext.example.dslproject.QuestionRef;
import org.xtext.example.dslproject.Reference;
import org.xtext.example.dslproject.Sin;
import org.xtext.example.dslproject.Sysvariable;
import org.xtext.example.dslproject.Training;
import org.xtext.example.dslproject.TrainingInput;
import org.xtext.example.dslproject.TrainingRef;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslprojectGenerator extends AbstractGenerator {
  @Data
  public static class IntentInformation {
    private final String name;
    
    private final Intent intent;
    
    private final Intent superintent;
    
    private final EList<QuestionRef> question;
    
    private final Training training;
    
    public IntentInformation(final String name, final Intent intent, final Intent superintent, final EList<QuestionRef> question, final Training training) {
      super();
      this.name = name;
      this.intent = intent;
      this.superintent = superintent;
      this.question = question;
      this.training = training;
    }
    
    @Override
    @Pure
    public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((this.name== null) ? 0 : this.name.hashCode());
      result = prime * result + ((this.intent== null) ? 0 : this.intent.hashCode());
      result = prime * result + ((this.superintent== null) ? 0 : this.superintent.hashCode());
      result = prime * result + ((this.question== null) ? 0 : this.question.hashCode());
      return prime * result + ((this.training== null) ? 0 : this.training.hashCode());
    }
    
    @Override
    @Pure
    public boolean equals(final Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      DslprojectGenerator.IntentInformation other = (DslprojectGenerator.IntentInformation) obj;
      if (this.name == null) {
        if (other.name != null)
          return false;
      } else if (!this.name.equals(other.name))
        return false;
      if (this.intent == null) {
        if (other.intent != null)
          return false;
      } else if (!this.intent.equals(other.intent))
        return false;
      if (this.superintent == null) {
        if (other.superintent != null)
          return false;
      } else if (!this.superintent.equals(other.superintent))
        return false;
      if (this.question == null) {
        if (other.question != null)
          return false;
      } else if (!this.question.equals(other.question))
        return false;
      if (this.training == null) {
        if (other.training != null)
          return false;
      } else if (!this.training.equals(other.training))
        return false;
      return true;
    }
    
    @Override
    @Pure
    public String toString() {
      ToStringBuilder b = new ToStringBuilder(this);
      b.add("name", this.name);
      b.add("intent", this.intent);
      b.add("superintent", this.superintent);
      b.add("question", this.question);
      b.add("training", this.training);
      return b.toString();
    }
    
    @Pure
    public String getName() {
      return this.name;
    }
    
    @Pure
    public Intent getIntent() {
      return this.intent;
    }
    
    @Pure
    public Intent getSuperintent() {
      return this.superintent;
    }
    
    @Pure
    public EList<QuestionRef> getQuestion() {
      return this.question;
    }
    
    @Pure
    public Training getTraining() {
      return this.training;
    }
  }
  
  @Data
  public static class IntentRelationInformation {
    private final Intent parentIntent;
    
    private final Intent childIntent;
    
    public IntentRelationInformation(final Intent parentIntent, final Intent childIntent) {
      super();
      this.parentIntent = parentIntent;
      this.childIntent = childIntent;
    }
    
    @Override
    @Pure
    public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((this.parentIntent== null) ? 0 : this.parentIntent.hashCode());
      return prime * result + ((this.childIntent== null) ? 0 : this.childIntent.hashCode());
    }
    
    @Override
    @Pure
    public boolean equals(final Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      DslprojectGenerator.IntentRelationInformation other = (DslprojectGenerator.IntentRelationInformation) obj;
      if (this.parentIntent == null) {
        if (other.parentIntent != null)
          return false;
      } else if (!this.parentIntent.equals(other.parentIntent))
        return false;
      if (this.childIntent == null) {
        if (other.childIntent != null)
          return false;
      } else if (!this.childIntent.equals(other.childIntent))
        return false;
      return true;
    }
    
    @Override
    @Pure
    public String toString() {
      ToStringBuilder b = new ToStringBuilder(this);
      b.add("parentIntent", this.parentIntent);
      b.add("childIntent", this.childIntent);
      return b.toString();
    }
    
    @Pure
    public Intent getParentIntent() {
      return this.parentIntent;
    }
    
    @Pure
    public Intent getChildIntent() {
      return this.childIntent;
    }
  }
  
  private Set<DslprojectGenerator.IntentInformation> intentInformation;
  
  private Set<DslprojectGenerator.IntentRelationInformation> intentRelationInformation;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.intentInformation = this.collectIntentInformation(Iterators.<Intent>filter(resource.getAllContents(), Intent.class));
    this.intentRelationInformation = this.collectIntentRelationInformation(Iterators.<FollowRelation>filter(resource.getAllContents(), FollowRelation.class));
    final Procedure1<Entity> _function = (Entity it) -> {
      this.generateEntityFile(it, fsa);
    };
    IteratorExtensions.<Entity>forEach(Iterators.<Entity>filter(resource.getAllContents(), Entity.class), _function);
    final Consumer<DslprojectGenerator.IntentInformation> _function_1 = (DslprojectGenerator.IntentInformation it) -> {
      this.generateIntentFile(it, fsa);
    };
    this.intentInformation.forEach(_function_1);
  }
  
  public void generateEntityFile(final Entity entity, final IFileSystemAccess2 fsa) {
    String _name = entity.getName();
    String _plus = (_name + "_entries_en.json");
    fsa.generateFile(_plus, this.generateEntityEntries(entity));
    String _name_1 = entity.getName();
    String _plus_1 = (_name_1 + ".json");
    fsa.generateFile(_plus_1, this.generateEntity(entity));
  }
  
  public void generateIntentFile(final DslprojectGenerator.IntentInformation intent, final IFileSystemAccess2 fsa) {
    fsa.generateFile((intent.name + ".json"), this.generateIntent(intent));
    fsa.generateFile((intent.name + "_usersays_en.json"), this.generateTrainingPhrases(intent.training));
  }
  
  public CharSequence generateRelationQuestions(final DslprojectGenerator.IntentInformation ri) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"parameters\": [");
    _builder.newLine();
    CharSequence _generateQuestions = this.generateQuestions(ri.intent.getQuestion());
    _builder.append(_generateQuestions);
    _builder.newLineIfNotEmpty();
    {
      if ((ri.superintent != null)) {
        CharSequence _generateQuestions_1 = this.generateQuestions(ri.superintent.getQuestion());
        _builder.append(_generateQuestions_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("],");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateRelationTraining(final DslprojectGenerator.IntentInformation ri) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence generateQuestions(final EList<QuestionRef> questions) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final QuestionRef parameter : questions) {
        Question _elvis = null;
        Question _question = parameter.getQuestion();
        if (_question != null) {
          _elvis = _question;
        } else {
          Question _superQuestion = parameter.getSuperQuestion().getSuperQuestion();
          _elvis = _superQuestion;
        }
        Question question = _elvis;
        _builder.newLineIfNotEmpty();
        _builder.append("{ ");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"required\": ");
        CharSequence _xifexpression = null;
        String _required = question.getRequired();
        boolean _tripleEquals = (_required == null);
        if (_tripleEquals) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("false,");
          _xifexpression = _builder_1;
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("true,");
          _xifexpression = _builder_2;
        }
        _builder.append(_xifexpression, "          ");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"dataType\": \"@");
        CharSequence _xifexpression_1 = null;
        Sysvariable _sysvar = question.getQuestionEntity().getWithEntity().getSysvar();
        boolean _tripleNotEquals = (_sysvar != null);
        if (_tripleNotEquals) {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("sys.");
          _xifexpression_1 = _builder_3;
        }
        _builder.append(_xifexpression_1, "          ");
        String _entityType = this.getEntityType(question.getQuestionEntity().getWithEntity());
        _builder.append(_entityType, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"name\": \"");
        String _entityType_1 = this.getEntityType(question.getQuestionEntity().getWithEntity());
        _builder.append(_entityType_1, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"value\": \"$");
        String _entityType_2 = this.getEntityType(question.getQuestionEntity().getWithEntity());
        _builder.append(_entityType_2, "          ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("\"prompts\": [");
        _builder.newLine();
        _builder.append("              ");
        _builder.append("\"");
        String _prompt = question.getPrompt();
        _builder.append(_prompt, "              ");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
        _builder.append("          ");
        _builder.append("],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"promptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"noMatchPromptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"noInputPromptMessages\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"outputDialogContexts\": [],");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"isList\": false,");
        _builder.newLine();
        _builder.append("          ");
        _builder.append("\"defaultValue\": \"\"");
        _builder.newLine();
        _builder.append("          ");
        _builder.newLine();
        {
          int _indexOf = questions.indexOf(parameter);
          int _length = ((Object[])Conversions.unwrapArray(questions, Object.class)).length;
          int _minus = (_length - 1);
          boolean _tripleNotEquals_1 = (_indexOf != _minus);
          if (_tripleNotEquals_1) {
            _builder.append("        ");
            _builder.append("},");
            _builder.newLine();
          } else {
            _builder.append("        ");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateIntent(final DslprojectGenerator.IntentInformation ri) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\"id\": \"");
    String _generateId = this.generateId(36);
    _builder.append(_generateId);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"name\": \"");
    _builder.append(ri.name);
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("\"auto\": true,");
    _builder.newLine();
    {
      for(final DslprojectGenerator.IntentRelationInformation relation : this.intentRelationInformation) {
        CharSequence _xifexpression = null;
        boolean _equals = Objects.equal(relation.childIntent, ri.intent);
        if (_equals) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("\"contexts\": [");
          _builder_1.newLine();
          _builder_1.append("\t\t\t    ");
          _builder_1.append("\"");
          String _name = relation.parentIntent.getName();
          _builder_1.append(_name, "\t\t\t    ");
          _builder_1.append("-followup\"");
          _builder_1.newLineIfNotEmpty();
          _builder_1.append("\t\t\t  ");
          _builder_1.append("],");
          _builder_1.newLine();
          _builder_1.append("\t\t\t  ");
          _builder_1.append("\"responses\": [");
          _builder_1.newLine();
          _builder_1.append("\t\t\t  \t\t\t\t\t");
          _builder_1.append("{");
          _builder_1.newLine();
          _builder_1.append("\t\t\t  \t\t\t\t\t");
          _builder_1.append("\"resetContexts\": false,");
          _builder_1.newLine();
          _builder_1.append("\t\t\t  \t\t\t\t\t");
          _builder_1.append("\"action\": \"\",");
          _builder_1.newLine();
          _builder_1.append("\t\t\t  \t\t\t\t\t");
          _builder_1.append("\"affectedContexts\":[],");
          _xifexpression = _builder_1;
        }
        _builder.append(_xifexpression);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    CharSequence _generateRelationQuestions = this.generateRelationQuestions(ri);
    _builder.append(_generateRelationQuestions);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"messages\": [");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"type\": 0,");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"lang\": \"en\",");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"condition\": \"\",");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"speech\": []");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"defaultResponsePlatforms\": {},");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"speech\": []");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"priority\": 500000,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"webhookUsed\": true,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"webhookForSlotFilling\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"fallbackIntent\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"events\": [],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"conditionalResponses\": [],");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"condition\": \"\",");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"conditionalFollowupEvents\": []");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTrainingPhrases(final Training training) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    _builder.newLine();
    {
      EList<TrainingRef> _trainingref = training.getTrainingref();
      for(final TrainingRef train : _trainingref) {
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"id\": \"");
        String _generateId = this.generateId(36);
        _builder.append(_generateId, "\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t    ");
        _builder.append("\"data\": [");
        _builder.newLine();
        {
          EList<TrainingInput> _input = train.getInput();
          for(final TrainingInput in : _input) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _generateTrainingInput = this.generateTrainingInput(in);
            _builder.append(_generateTrainingInput, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("],");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\"isTemplate\": false,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("\"count\": 0,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("\"updated\": 0");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("},");
        _builder.newLine();
      }
    }
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTrainingInput(final TrainingInput input) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (input instanceof Sin) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"text\": \" ");
      String _s = ((Sin)input).getS();
      _builder.append(_s, "\t\t\t\t");
      _builder.append(" \",");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("\"userDefined\": false");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("},");
      _switchResult = _builder;
    }
    if (!_matched) {
      if (input instanceof Decl) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\"text\": \"");
        String _trainingstring = ((Decl)input).getDeclarations().getTrainingstring();
        _builder.append(_trainingstring, "\t\t\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\"alias\": \"");
        String _entityType = this.getEntityType(((Decl)input).getDeclarations().getReference());
        _builder.append(_entityType, "\t\t\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\"meta\": \"@");
        String _entityType_1 = this.getEntityType(((Decl)input).getDeclarations().getReference());
        _builder.append(_entityType_1, "\t\t\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\"userDefined\": false");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("},");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _switchResult = _builder;
    }
    return _switchResult;
  }
  
  public String getEntityType(final Reference ref) {
    String _xifexpression = null;
    Entity _entity = ref.getEntity();
    boolean _tripleNotEquals = (_entity != null);
    if (_tripleNotEquals) {
      _xifexpression = ref.getEntity().getName();
    } else {
      String _xifexpression_1 = null;
      Sysvariable _sysvar = ref.getSysvar();
      boolean _tripleNotEquals_1 = (_sysvar != null);
      if (_tripleNotEquals_1) {
        _xifexpression_1 = ref.getSysvar().getValue();
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence generateEntityEntries(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    _builder.newLine();
    {
      EList<EntityExample> _example = entity.getExample();
      for(final EntityExample example : _example) {
        _builder.append("{");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("\"value\": \"");
        String _name = example.getName();
        _builder.append(_name, "  ");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("\"synonyms\": [");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("\"\"");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("]");
        _builder.newLine();
        _builder.append("},");
        _builder.newLine();
      }
    }
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEntity(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"id\": \"");
    String _generateId = this.generateId(36);
    _builder.append(_generateId, "  ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("\"name\": \"");
    String _name = entity.getName();
    _builder.append(_name, "  ");
    _builder.append("\",");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("\"isOverridable\": true,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"isEnum\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"isRegexp\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"automatedExpansion\": false,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"allowFuzzyExtraction\": true");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public Set<DslprojectGenerator.IntentInformation> collectIntentInformation(final Iterator<Intent> intents) {
    HashSet<DslprojectGenerator.IntentInformation> _xblockexpression = null;
    {
      final HashSet<DslprojectGenerator.IntentInformation> result = new HashSet<DslprojectGenerator.IntentInformation>();
      final Procedure1<Intent> _function = (Intent intent) -> {
        String _name = intent.getName();
        Intent _zuper = intent.getZuper();
        EList<QuestionRef> _question = intent.getQuestion();
        Training _training = intent.getTraining();
        DslprojectGenerator.IntentInformation _intentInformation = new DslprojectGenerator.IntentInformation(_name, intent, _zuper, _question, _training);
        result.add(_intentInformation);
      };
      IteratorExtensions.<Intent>forEach(intents, _function);
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  public Set<DslprojectGenerator.IntentRelationInformation> collectIntentRelationInformation(final Iterator<FollowRelation> relations) {
    HashSet<DslprojectGenerator.IntentRelationInformation> _xblockexpression = null;
    {
      final HashSet<DslprojectGenerator.IntentRelationInformation> result = new HashSet<DslprojectGenerator.IntentRelationInformation>();
      final Procedure1<FollowRelation> _function = (FollowRelation relation) -> {
        Intent _parent = relation.getParent();
        Intent _child = relation.getChild();
        DslprojectGenerator.IntentRelationInformation _intentRelationInformation = new DslprojectGenerator.IntentRelationInformation(_parent, _child);
        result.add(_intentRelationInformation);
      };
      IteratorExtensions.<FollowRelation>forEach(relations, _function);
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  private final String ALPHA_NUMERIC_STRING = "abcdefghijklmnopqrstuvxyz0123456789-";
  
  public String generateId(final int count) {
    String _xblockexpression = null;
    {
      int c = count;
      String id = "";
      while ((c-- != 0)) {
        {
          double _random = Math.random();
          int _length = this.ALPHA_NUMERIC_STRING.length();
          final int character = Double.valueOf((_random * _length)).intValue();
          String _id = id;
          char _charAt = this.ALPHA_NUMERIC_STRING.charAt(character);
          id = (_id + Character.valueOf(_charAt));
        }
      }
      _xblockexpression = id;
    }
    return _xblockexpression;
  }
}
