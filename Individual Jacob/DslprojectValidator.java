/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.validation;

import java.awt.Window;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.util.SimpleAttributeResolver;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.dslproject.Agent;
import org.xtext.example.dslproject.DslprojectPackage.Literals;
import org.xtext.example.dslproject.Entity;
import org.xtext.example.dslproject.Intent;
import org.xtext.example.dslproject.Model;
import org.xtext.example.dslproject.impl.EntityImpl;
import org.xtext.example.dslproject.impl.IntentImpl;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class DslprojectValidator extends AbstractDslprojectValidator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String DUPLICATE_NAME = "duplicateName";

	@Check
	public void checkEntityStartsWithCapital(Entity entity) {
		if (!Character.isUpperCase(entity.getName().charAt(0))) {
			warning("Entity name should start with a capital",
					Literals.ENTITY.getEIDAttribute(),
					INVALID_NAME);
		}
	}
	
	@Check
	public void checkIntentStartsWithCapital(Intent intent) {	
		if (!Character.isUpperCase(intent.getName().charAt(0))) {
			warning("Intent name should start with a capital",
					Literals.INTENT.getEIDAttribute(),
					INVALID_NAME);
		}
	}
	
   
	/**
	 * Can mark that something already is name the same, but not where (just marks everything)
	 * @param feature
	 */
	@Check
    public void checkFeatureNameIsUnique(Model feature) {
   
    	HashSet<String> names = new HashSet<String>();
        for (Agent other : feature.getAgent()) {
        	//System.out.println(other.getName());
            if (names.contains(other.getName())) {
            	if (other.getClass().getName() == EntityImpl.class.getName()) {
            		warning("Entity names have to be unique", Literals.AGENT.getEIDAttribute(), "sameNameReference");
            		return;
            	} else if (other.getClass().getName() == IntentImpl.class.getName()) {
            		warning("Intent names have to be unique", Literals.AGENT.getEIDAttribute(), "sameNameReference");
            		return;
            	}
            }
            names.add(other.getName());
        }
    }
	
	
	
	
	

	
	@Check
	public void checkEntityNoCyclicExtends(Intent intent) {
		HashSet<String> seen = new HashSet<String>();
		seen.add(intent.getName());
		if(selfExtends(intent.getZuper(), seen)) {
			warning("Cyclic extends relation", Literals.INTENT__ZUPER, "cyclicInheritance");
		}
	}
	
	private boolean selfExtends(Intent next, HashSet<String> seen) {
		if(next==null) {
			return false;
		} else if(seen.contains(next.getName())) {
			return true;
		} else {
			seen.add(next.getName()); 
			return selfExtends(next.getZuper(), seen); 
		}
		
		
	}
	
	

}
