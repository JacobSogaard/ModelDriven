/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.example.mydsl.myMath.Add;
import org.xtext.example.mydsl.myMath.Div;
import org.xtext.example.mydsl.myMath.Expression;
import org.xtext.example.mydsl.myMath.MathExp;
import org.xtext.example.mydsl.myMath.Mult;
import org.xtext.example.mydsl.myMath.Num;
import org.xtext.example.mydsl.myMath.Sub;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyMathGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    int _display = this.display(math);
    String _plus = ("Math expression = " + Integer.valueOf(_display));
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExpression(math.getExp());
  }
  
  public int computeExpression(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Add) {
      _matched=true;
      int _computeExpression = this.computeExpression(((Add)exp).getLeft());
      int _computeExpression_1 = this.computeExpression(((Add)exp).getRight());
      _switchResult = (_computeExpression + _computeExpression_1);
    }
    if (!_matched) {
      if (exp instanceof Sub) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Sub)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Sub)exp).getRight());
        _switchResult = (_computeExpression - _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Mult)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Mult)exp).getRight());
        _switchResult = (_computeExpression * _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Div)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Div)exp).getRight());
        _switchResult = (_computeExpression / _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = ((Num)exp).getValue();
      }
    }
    if (!_matched) {
      _switchResult = 1;
    }
    return _switchResult;
  }
  
  public int display(final MathExp math) {
    return this.displayExp(math.getExp());
  }
  
  public int displayExp(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Add) {
      _matched=true;
      int _computeExpression = this.computeExpression(((Add)exp).getLeft());
      int _computeExpression_1 = this.computeExpression(((Add)exp).getRight());
      _switchResult = (_computeExpression + _computeExpression_1);
    }
    if (!_matched) {
      if (exp instanceof Sub) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Sub)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Sub)exp).getRight());
        _switchResult = (_computeExpression - _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Mult)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Mult)exp).getRight());
        _switchResult = (_computeExpression * _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExpression = this.computeExpression(((Div)exp).getLeft());
        int _computeExpression_1 = this.computeExpression(((Div)exp).getRight());
        _switchResult = (_computeExpression / _computeExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = ((Num)exp).getValue();
      }
    }
    if (!_matched) {
      throw new Error("Invalid!");
    }
    return _switchResult;
  }
}
