/*
 * generated by Xtext 2.20.0
 */
package sogaard.jacob.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import sogaard.jacob.mdsdassignment2.Add;
import sogaard.jacob.mdsdassignment2.Div;
import sogaard.jacob.mdsdassignment2.Exp;
import sogaard.jacob.mdsdassignment2.MathExp;
import sogaard.jacob.mdsdassignment2.Mdsdassignment2Package;
import sogaard.jacob.mdsdassignment2.Mult;
import sogaard.jacob.mdsdassignment2.Num;
import sogaard.jacob.mdsdassignment2.Parenthesis;
import sogaard.jacob.mdsdassignment2.Sub;
import sogaard.jacob.services.Mdsdassignment2GrammarAccess;

@SuppressWarnings("all")
public class Mdsdassignment2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Mdsdassignment2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Mdsdassignment2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Mdsdassignment2Package.ADD:
				sequence_ExpOp(context, (Add) semanticObject); 
				return; 
			case Mdsdassignment2Package.DIV:
				sequence_Factor(context, (Div) semanticObject); 
				return; 
			case Mdsdassignment2Package.EXP:
				sequence_Exp(context, (Exp) semanticObject); 
				return; 
			case Mdsdassignment2Package.MATH_EXP:
				sequence_MathExp(context, (MathExp) semanticObject); 
				return; 
			case Mdsdassignment2Package.MULT:
				sequence_Factor(context, (Mult) semanticObject); 
				return; 
			case Mdsdassignment2Package.NUM:
				sequence_Num(context, (Num) semanticObject); 
				return; 
			case Mdsdassignment2Package.PARENTHESIS:
				sequence_Parenthesis(context, (Parenthesis) semanticObject); 
				return; 
			case Mdsdassignment2Package.SUB:
				sequence_ExpOp(context, (Sub) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ExpOp returns Add
	 *     ExpOp.Add_1_0_0 returns Add
	 *     ExpOp.Sub_1_1_0 returns Add
	 *
	 * Constraint:
	 *     (left=ExpOp_Add_1_0_0 right=Factor)
	 */
	protected void sequence_ExpOp(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.ADD__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.ADD__LEFT));
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.ADD__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.ADD__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpOpAccess().getAddLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpOpAccess().getRightFactorParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Sub
	 *     ExpOp.Add_1_0_0 returns Sub
	 *     ExpOp.Sub_1_1_0 returns Sub
	 *
	 * Constraint:
	 *     (left=ExpOp_Sub_1_1_0 right=Factor)
	 */
	protected void sequence_ExpOp(ISerializationContext context, Sub semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.SUB__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.SUB__LEFT));
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.SUB__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.SUB__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpOpAccess().getSubLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpOpAccess().getRightFactorParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exp returns Exp
	 *
	 * Constraint:
	 *     (left=ExpOp (operator=ExpOp right=Exp)?)
	 */
	protected void sequence_Exp(ISerializationContext context, Exp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Div
	 *     ExpOp.Add_1_0_0 returns Div
	 *     ExpOp.Sub_1_1_0 returns Div
	 *     Factor returns Div
	 *     Factor.Mult_1_0_0 returns Div
	 *     Factor.Div_1_1_0 returns Div
	 *
	 * Constraint:
	 *     (left=Factor_Div_1_1_0 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.DIV__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.DIV__LEFT));
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.DIV__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.DIV__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getDivLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Mult
	 *     ExpOp.Add_1_0_0 returns Mult
	 *     ExpOp.Sub_1_1_0 returns Mult
	 *     Factor returns Mult
	 *     Factor.Mult_1_0_0 returns Mult
	 *     Factor.Div_1_1_0 returns Mult
	 *
	 * Constraint:
	 *     (left=Factor_Mult_1_0_0 right=Primary)
	 */
	protected void sequence_Factor(ISerializationContext context, Mult semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.MULT__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.MULT__LEFT));
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.MULT__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.MULT__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getMultLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MathExp returns MathExp
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_MathExp(ISerializationContext context, MathExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.MATH_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.MATH_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMathExpAccess().getExpExpParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Num
	 *     ExpOp.Add_1_0_0 returns Num
	 *     ExpOp.Sub_1_1_0 returns Num
	 *     Factor returns Num
	 *     Factor.Mult_1_0_0 returns Num
	 *     Factor.Div_1_1_0 returns Num
	 *     Primary returns Num
	 *     Num returns Num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Num(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpOp returns Parenthesis
	 *     ExpOp.Add_1_0_0 returns Parenthesis
	 *     ExpOp.Sub_1_1_0 returns Parenthesis
	 *     Factor returns Parenthesis
	 *     Factor.Mult_1_0_0 returns Parenthesis
	 *     Factor.Div_1_1_0 returns Parenthesis
	 *     Primary returns Parenthesis
	 *     Parenthesis returns Parenthesis
	 *
	 * Constraint:
	 *     exp=Exp
	 */
	protected void sequence_Parenthesis(ISerializationContext context, Parenthesis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Mdsdassignment2Package.Literals.PARENTHESIS__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Mdsdassignment2Package.Literals.PARENTHESIS__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParenthesisAccess().getExpExpParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
}
